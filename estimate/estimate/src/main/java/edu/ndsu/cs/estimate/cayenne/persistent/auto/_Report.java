package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import edu.ndsu.cs.estimate.cayenne.persistent.Task;

/**
 * Class _Report was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Report extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final NumericIdProperty<Integer> REPORT_PK_PK_PROPERTY = PropertyFactory.createNumericId("reportPK", "Report", Integer.class);
    public static final String REPORT_PK_PK_COLUMN = "reportPK";

    public static final StringProperty<String> CATEGORY = PropertyFactory.createString("category", String.class);
    public static final NumericProperty<Double> DAYS_SINCE_TASK_START = PropertyFactory.createNumeric("daysSinceTaskStart", Double.class);
    public static final NumericProperty<Double> ESTIMATED_DAYS_TO_COMPLETION = PropertyFactory.createNumeric("estimatedDaysToCompletion", Double.class);
    public static final NumericProperty<Double> NET_LOSS_GAIN = PropertyFactory.createNumeric("netLossGain", Double.class);
    public static final StringProperty<String> TASK_STATUS = PropertyFactory.createString("taskStatus", String.class);
    public static final ListProperty<Task> TASKS = PropertyFactory.createList("tasks", Task.class);

    protected String category;
    protected Double daysSinceTaskStart;
    protected Double estimatedDaysToCompletion;
    protected Double netLossGain;
    protected String taskStatus;

    protected Object tasks;

    public void setCategory(String category) {
        beforePropertyWrite("category", this.category, category);
        this.category = category;
    }

    public String getCategory() {
        beforePropertyRead("category");
        return this.category;
    }

    public void setDaysSinceTaskStart(double daysSinceTaskStart) {
        beforePropertyWrite("daysSinceTaskStart", this.daysSinceTaskStart, daysSinceTaskStart);
        this.daysSinceTaskStart = daysSinceTaskStart;
    }

    public double getDaysSinceTaskStart() {
        beforePropertyRead("daysSinceTaskStart");
        if(this.daysSinceTaskStart == null) {
            return 0;
        }
        return this.daysSinceTaskStart;
    }

    public void setEstimatedDaysToCompletion(double estimatedDaysToCompletion) {
        beforePropertyWrite("estimatedDaysToCompletion", this.estimatedDaysToCompletion, estimatedDaysToCompletion);
        this.estimatedDaysToCompletion = estimatedDaysToCompletion;
    }

    public double getEstimatedDaysToCompletion() {
        beforePropertyRead("estimatedDaysToCompletion");
        if(this.estimatedDaysToCompletion == null) {
            return 0;
        }
        return this.estimatedDaysToCompletion;
    }

    public void setNetLossGain(double netLossGain) {
        beforePropertyWrite("netLossGain", this.netLossGain, netLossGain);
        this.netLossGain = netLossGain;
    }

    public double getNetLossGain() {
        beforePropertyRead("netLossGain");
        if(this.netLossGain == null) {
            return 0;
        }
        return this.netLossGain;
    }

    public void setTaskStatus(String taskStatus) {
        beforePropertyWrite("taskStatus", this.taskStatus, taskStatus);
        this.taskStatus = taskStatus;
    }

    public String getTaskStatus() {
        beforePropertyRead("taskStatus");
        return this.taskStatus;
    }

    public void addToTasks(Task obj) {
        addToManyTarget("tasks", obj, true);
    }

    public void removeFromTasks(Task obj) {
        removeToManyTarget("tasks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Task> getTasks() {
        return (List<Task>)readProperty("tasks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "category":
                return this.category;
            case "daysSinceTaskStart":
                return this.daysSinceTaskStart;
            case "estimatedDaysToCompletion":
                return this.estimatedDaysToCompletion;
            case "netLossGain":
                return this.netLossGain;
            case "taskStatus":
                return this.taskStatus;
            case "tasks":
                return this.tasks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "category":
                this.category = (String)val;
                break;
            case "daysSinceTaskStart":
                this.daysSinceTaskStart = (Double)val;
                break;
            case "estimatedDaysToCompletion":
                this.estimatedDaysToCompletion = (Double)val;
                break;
            case "netLossGain":
                this.netLossGain = (Double)val;
                break;
            case "taskStatus":
                this.taskStatus = (String)val;
                break;
            case "tasks":
                this.tasks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.category);
        out.writeObject(this.daysSinceTaskStart);
        out.writeObject(this.estimatedDaysToCompletion);
        out.writeObject(this.netLossGain);
        out.writeObject(this.taskStatus);
        out.writeObject(this.tasks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.category = (String)in.readObject();
        this.daysSinceTaskStart = (Double)in.readObject();
        this.estimatedDaysToCompletion = (Double)in.readObject();
        this.netLossGain = (Double)in.readObject();
        this.taskStatus = (String)in.readObject();
        this.tasks = in.readObject();
    }

}
