package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.CallibrationCategory;

/**
 * Class _CallibrationSuggestion was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CallibrationSuggestion extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final Property<Integer> SUGGESTION_ID_PK_PROPERTY = Property.create(ExpressionFactory.dbPathExp("SuggestionID"), Integer.class);
    public static final String SUGGESTION_ID_PK_COLUMN = "SuggestionID";

    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<CallibrationCategory>> CATEGORIES = Property.create("categories", List.class);

    protected String description;
    protected String name;

    protected Object categories;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToCategories(CallibrationCategory obj) {
        addToManyTarget("categories", obj, true);
    }

    public void removeFromCategories(CallibrationCategory obj) {
        removeToManyTarget("categories", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CallibrationCategory> getCategories() {
        return (List<CallibrationCategory>)readProperty("categories");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "name":
                return this.name;
            case "categories":
                return this.categories;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "categories":
                this.categories = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.name);
        out.writeObject(this.categories);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.name = (String)in.readObject();
        this.categories = in.readObject();
    }

}
