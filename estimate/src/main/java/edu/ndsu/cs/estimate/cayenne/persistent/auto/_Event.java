package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.exp.Property;

/**
 * Class _Event was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Event extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> CATEGORY = Property.create("category", String.class);
    public static final Property<Date> CREATED_DATE = Property.create("createdDate", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Date> EVENT_DATE = Property.create("eventDate", Date.class);
    public static final Property<Integer> ID = Property.create("id", Integer.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Integer> RESULT = Property.create("result", Integer.class);

    protected String category;
    protected Date createdDate;
    protected String description;
    protected Date eventDate;
    protected int id;
    protected String name;
    protected Integer result;


    public void setCategory(String category) {
        beforePropertyWrite("category", this.category, category);
        this.category = category;
    }

    public String getCategory() {
        beforePropertyRead("category");
        return this.category;
    }

    public void setCreatedDate(Date createdDate) {
        beforePropertyWrite("createdDate", this.createdDate, createdDate);
        this.createdDate = createdDate;
    }

    public Date getCreatedDate() {
        beforePropertyRead("createdDate");
        return this.createdDate;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEventDate(Date eventDate) {
        beforePropertyWrite("eventDate", this.eventDate, eventDate);
        this.eventDate = eventDate;
    }

    public Date getEventDate() {
        beforePropertyRead("eventDate");
        return this.eventDate;
    }

    public void setId(int id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public int getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setResult(int result) {
        beforePropertyWrite("result", this.result, result);
        this.result = result;
    }

    public int getResult() {
        beforePropertyRead("result");
        if(this.result == null) {
            return 0;
        }
        return this.result;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "category":
                return this.category;
            case "createdDate":
                return this.createdDate;
            case "description":
                return this.description;
            case "eventDate":
                return this.eventDate;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "result":
                return this.result;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "category":
                this.category = (String)val;
                break;
            case "createdDate":
                this.createdDate = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "eventDate":
                this.eventDate = (Date)val;
                break;
            case "id":
                this.id = val == null ? 0 : (int)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "result":
                this.result = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.category);
        out.writeObject(this.createdDate);
        out.writeObject(this.description);
        out.writeObject(this.eventDate);
        out.writeInt(this.id);
        out.writeObject(this.name);
        out.writeObject(this.result);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.category = (String)in.readObject();
        this.createdDate = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.eventDate = (Date)in.readObject();
        this.id = in.readInt();
        this.name = (String)in.readObject();
        this.result = (Integer)in.readObject();
    }

}
