package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.CallibrationExercise;
import edu.ndsu.cs.estimate.cayenne.persistent.User;

/**
 * Class _CallibrationEstimate was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CallibrationEstimate extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final Property<Integer> ESTIMATE_ID_PK_PROPERTY = Property.create(ExpressionFactory.dbPathExp("EstimateID"), Integer.class);
    public static final String ESTIMATE_ID_PK_COLUMN = "EstimateID";

    public static final Property<Integer> PERCENT_PREDICTION = Property.create("percentPrediction", Integer.class);
    public static final Property<CallibrationExercise> EXERCISE = Property.create("exercise", CallibrationExercise.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected int percentPrediction;

    protected Object exercise;
    protected Object user;

    public void setPercentPrediction(int percentPrediction) {
        beforePropertyWrite("percentPrediction", this.percentPrediction, percentPrediction);
        this.percentPrediction = percentPrediction;
    }

    public int getPercentPrediction() {
        beforePropertyRead("percentPrediction");
        return this.percentPrediction;
    }

    public void setExercise(CallibrationExercise exercise) {
        setToOneTarget("exercise", exercise, true);
    }

    public CallibrationExercise getExercise() {
        return (CallibrationExercise)readProperty("exercise");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "percentPrediction":
                return this.percentPrediction;
            case "exercise":
                return this.exercise;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "percentPrediction":
                this.percentPrediction = val == null ? 0 : (int)val;
                break;
            case "exercise":
                this.exercise = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.percentPrediction);
        out.writeObject(this.exercise);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.percentPrediction = in.readInt();
        this.exercise = in.readObject();
        this.user = in.readObject();
    }

}
