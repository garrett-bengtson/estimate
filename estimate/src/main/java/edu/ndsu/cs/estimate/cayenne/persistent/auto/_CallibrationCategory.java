package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.CallibrationExercise;
import edu.ndsu.cs.estimate.cayenne.persistent.CallibrationSuggestion;

/**
 * Class _CallibrationCategory was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CallibrationCategory extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final Property<Integer> CATEGORY_ID_PK_PROPERTY = Property.create(ExpressionFactory.dbPathExp("CategoryID"), Integer.class);
    public static final String CATEGORY_ID_PK_COLUMN = "CategoryID";

    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<CallibrationExercise>> EXERSISES = Property.create("exersises", List.class);
    public static final Property<List<CallibrationSuggestion>> SUGGESTIONS = Property.create("suggestions", List.class);

    protected String description;
    protected String name;

    protected Object exersises;
    protected Object suggestions;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToExersises(CallibrationExercise obj) {
        addToManyTarget("exersises", obj, true);
    }

    public void removeFromExersises(CallibrationExercise obj) {
        removeToManyTarget("exersises", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CallibrationExercise> getExersises() {
        return (List<CallibrationExercise>)readProperty("exersises");
    }

    public void addToSuggestions(CallibrationSuggestion obj) {
        addToManyTarget("suggestions", obj, true);
    }

    public void removeFromSuggestions(CallibrationSuggestion obj) {
        removeToManyTarget("suggestions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CallibrationSuggestion> getSuggestions() {
        return (List<CallibrationSuggestion>)readProperty("suggestions");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "name":
                return this.name;
            case "exersises":
                return this.exersises;
            case "suggestions":
                return this.suggestions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "exersises":
                this.exersises = val;
                break;
            case "suggestions":
                this.suggestions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.name);
        out.writeObject(this.exersises);
        out.writeObject(this.suggestions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.name = (String)in.readObject();
        this.exersises = in.readObject();
        this.suggestions = in.readObject();
    }

}
