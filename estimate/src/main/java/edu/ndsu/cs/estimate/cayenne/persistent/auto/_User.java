package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.CallibrationEstimate;
import edu.ndsu.cs.estimate.cayenne.persistent.Role;
import edu.ndsu.cs.estimate.cayenne.persistent.Task;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final Property<Integer> USER_ID_PK_PROPERTY = Property.create(ExpressionFactory.dbPathExp("UserId"), Integer.class);
    public static final String USER_ID_PK_COLUMN = "UserId";

    public static final Property<String> PASSWORD_HASH = Property.create("passwordHash", String.class);
    public static final Property<String> PASSWORD_SALT = Property.create("passwordSalt", String.class);
    public static final Property<String> USER_NAME = Property.create("userName", String.class);
    public static final Property<List<CallibrationEstimate>> ESTIMATES = Property.create("estimates", List.class);
    public static final Property<List<Role>> ROLES = Property.create("roles", List.class);
    public static final Property<List<Task>> TASKS = Property.create("tasks", List.class);

    protected String passwordHash;
    protected String passwordSalt;
    protected String userName;

    protected Object estimates;
    protected Object roles;
    protected Object tasks;

    public void setPasswordHash(String passwordHash) {
        beforePropertyWrite("passwordHash", this.passwordHash, passwordHash);
        this.passwordHash = passwordHash;
    }

    public String getPasswordHash() {
        beforePropertyRead("passwordHash");
        return this.passwordHash;
    }

    public void setPasswordSalt(String passwordSalt) {
        beforePropertyWrite("passwordSalt", this.passwordSalt, passwordSalt);
        this.passwordSalt = passwordSalt;
    }

    public String getPasswordSalt() {
        beforePropertyRead("passwordSalt");
        return this.passwordSalt;
    }

    public void setUserName(String userName) {
        beforePropertyWrite("userName", this.userName, userName);
        this.userName = userName;
    }

    public String getUserName() {
        beforePropertyRead("userName");
        return this.userName;
    }

    public void addToEstimates(CallibrationEstimate obj) {
        addToManyTarget("estimates", obj, true);
    }

    public void removeFromEstimates(CallibrationEstimate obj) {
        removeToManyTarget("estimates", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CallibrationEstimate> getEstimates() {
        return (List<CallibrationEstimate>)readProperty("estimates");
    }

    public void addToRoles(Role obj) {
        addToManyTarget("roles", obj, true);
    }

    public void removeFromRoles(Role obj) {
        removeToManyTarget("roles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Role> getRoles() {
        return (List<Role>)readProperty("roles");
    }

    public void addToTasks(Task obj) {
        addToManyTarget("tasks", obj, true);
    }

    public void removeFromTasks(Task obj) {
        removeToManyTarget("tasks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Task> getTasks() {
        return (List<Task>)readProperty("tasks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "passwordHash":
                return this.passwordHash;
            case "passwordSalt":
                return this.passwordSalt;
            case "userName":
                return this.userName;
            case "estimates":
                return this.estimates;
            case "roles":
                return this.roles;
            case "tasks":
                return this.tasks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "passwordHash":
                this.passwordHash = (String)val;
                break;
            case "passwordSalt":
                this.passwordSalt = (String)val;
                break;
            case "userName":
                this.userName = (String)val;
                break;
            case "estimates":
                this.estimates = val;
                break;
            case "roles":
                this.roles = val;
                break;
            case "tasks":
                this.tasks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.passwordHash);
        out.writeObject(this.passwordSalt);
        out.writeObject(this.userName);
        out.writeObject(this.estimates);
        out.writeObject(this.roles);
        out.writeObject(this.tasks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.passwordHash = (String)in.readObject();
        this.passwordSalt = (String)in.readObject();
        this.userName = (String)in.readObject();
        this.estimates = in.readObject();
        this.roles = in.readObject();
        this.tasks = in.readObject();
    }

}
