package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

import edu.ndsu.cs.estimate.cayenne.persistent.Task;

/**
 * Class _Hours was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Hours extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final NumericIdProperty<Integer> HOURS_PK_PK_PROPERTY = PropertyFactory.createNumericId("hoursPK", "Hours", Integer.class);
    public static final String HOURS_PK_PK_COLUMN = "hoursPK";

    public static final NumericProperty<Integer> HOURS_LOGGED = PropertyFactory.createNumeric("hoursLogged", Integer.class);
    public static final DateProperty<Date> TIME_STAMP = PropertyFactory.createDate("timeStamp", Date.class);
    public static final EntityProperty<Task> TASKS = PropertyFactory.createEntity("tasks", Task.class);

    protected int hoursLogged;
    protected Date timeStamp;

    protected Object tasks;

    public void setHoursLogged(int hoursLogged) {
        beforePropertyWrite("hoursLogged", this.hoursLogged, hoursLogged);
        this.hoursLogged = hoursLogged;
    }

    public int getHoursLogged() {
        beforePropertyRead("hoursLogged");
        return this.hoursLogged;
    }

    public void setTimeStamp(Date timeStamp) {
        beforePropertyWrite("timeStamp", this.timeStamp, timeStamp);
        this.timeStamp = timeStamp;
    }

    public Date getTimeStamp() {
        beforePropertyRead("timeStamp");
        return this.timeStamp;
    }

    public void setTasks(Task tasks) {
        setToOneTarget("tasks", tasks, true);
    }

    public Task getTasks() {
        return (Task)readProperty("tasks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "hoursLogged":
                return this.hoursLogged;
            case "timeStamp":
                return this.timeStamp;
            case "tasks":
                return this.tasks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "hoursLogged":
                this.hoursLogged = val == null ? 0 : (int)val;
                break;
            case "timeStamp":
                this.timeStamp = (Date)val;
                break;
            case "tasks":
                this.tasks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.hoursLogged);
        out.writeObject(this.timeStamp);
        out.writeObject(this.tasks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.hoursLogged = in.readInt();
        this.timeStamp = (Date)in.readObject();
        this.tasks = in.readObject();
    }

}
